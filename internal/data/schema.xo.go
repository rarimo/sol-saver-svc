// Package data contains generated code for schema 'public'.
package data

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
)

// StringSlice is a slice of strings.
type StringSlice []string

// quoteEscapeRegex is the regex to match escaped characters in a string.
var quoteEscapeRegex = regexp.MustCompile(`([^\\]([\\]{2})*)\\"`)

// Scan satisfies the sql.Scanner interface for StringSlice.
func (ss *StringSlice) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid StringSlice")
	}

	// change quote escapes for csv parser
	str := quoteEscapeRegex.ReplaceAllString(string(buf), `$1""`)
	str = strings.Replace(str, `\\`, `\`, -1)

	// remove braces
	str = str[1 : len(str)-1]

	// bail if only one
	if len(str) == 0 {
		*ss = StringSlice([]string{})
		return nil
	}

	// parse with csv reader
	cr := csv.NewReader(strings.NewReader(str))
	slice, err := cr.Read()
	if err != nil {
		fmt.Printf("exiting!: %v\n", err)
		return err
	}

	*ss = StringSlice(slice)

	return nil
}

// Value satisfies the driver.Valuer interface for StringSlice.
func (ss StringSlice) Value() (driver.Value, error) {
	v := make([]string, len(ss))
	for i, s := range ss {
		v[i] = `"` + strings.Replace(strings.Replace(s, `\`, `\\\`, -1), `"`, `\"`, -1) + `"`
	}
	return "{" + strings.Join(v, ",") + "}", nil
} // FtDeposit represents a row from 'public.ft_deposits'.
type FtDeposit struct {
	ID            int64          `db:"id"`             // id
	Hash          string         `db:"hash"`           // hash
	InstructionID int            `db:"instruction_id"` // instruction_id
	Sender        string         `db:"sender"`         // sender
	Receiver      string         `db:"receiver"`       // receiver
	TargetNetwork string         `db:"target_network"` // target_network
	Amount        int64          `db:"amount"`         // amount
	Mint          string         `db:"mint"`           // mint
	BundleData    sql.NullString `db:"bundle_data"`    // bundle_data
	BundleSeed    sql.NullString `db:"bundle_seed"`    // bundle_seed

}

// GorpMigration represents a row from 'public.gorp_migrations'.
type GorpMigration struct {
	ID        string       `db:"id"`         // id
	AppliedAt sql.NullTime `db:"applied_at"` // applied_at

}

// NativeDeposit represents a row from 'public.native_deposits'.
type NativeDeposit struct {
	ID            int64          `db:"id"`             // id
	Hash          string         `db:"hash"`           // hash
	InstructionID int            `db:"instruction_id"` // instruction_id
	Sender        string         `db:"sender"`         // sender
	Receiver      string         `db:"receiver"`       // receiver
	TargetNetwork string         `db:"target_network"` // target_network
	Amount        int64          `db:"amount"`         // amount
	BundleData    sql.NullString `db:"bundle_data"`    // bundle_data
	BundleSeed    sql.NullString `db:"bundle_seed"`    // bundle_seed

}

// NftDeposit represents a row from 'public.nft_deposits'.
type NftDeposit struct {
	ID            int64          `db:"id"`             // id
	Hash          string         `db:"hash"`           // hash
	InstructionID int            `db:"instruction_id"` // instruction_id
	Sender        string         `db:"sender"`         // sender
	Receiver      string         `db:"receiver"`       // receiver
	TargetNetwork string         `db:"target_network"` // target_network
	Mint          string         `db:"mint"`           // mint
	Collection    sql.NullString `db:"collection"`     // collection
	BundleData    sql.NullString `db:"bundle_data"`    // bundle_data
	BundleSeed    sql.NullString `db:"bundle_seed"`    // bundle_seed

}
